# config/packages/security.yaml
security:
    # 1) Hashage des mots de passe
    password_hashers:
        App\Entity\User:
            algorithm: auto

    # 2) Chargement des utilisateurs depuis l'entité User
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    # 3) Configuration des firewalls
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            pattern: ^/       
            # 3.1. FORM LOGIN — affiche le formulaire sur GET /login et traite le POST sur /login
            form_login:
                login_path: login      # doit correspondre à #[Route(path:'/login', name:'login')]
                check_path: login      # Symfony traitera le POST pour authentifier l'utilisateur
                enable_csrf: true

            # 3.2. LOGOUT — Symfony supprime la session sur /logout et redirige ensuite
            logout:
                path: logout           # doit correspondre à #[Route(path:'/logout', name:'logout')]
                target: /login         # redirige vers /login après déconnexion

            # 3.3. Notez :
            #      - On ENLÈVE totalement "anonymous" ou "lazy" ici.
            #      - Par défaut, Symfony autorise l'anonyme sur les firewalls qui comportent un mécanisme d’authentification.
            #      - Vous n’avez donc rien d’autre à mettre pour autoriser /login à être publique.

            provider: app_user_provider

    # 4) Contrôle d’accès (order = important !)
    access_control:
        # 4.1. PREMIÈRE règle : /login doit être ouverte à TOUS (anonymes inclus)
        - { path: ^/login,    roles: PUBLIC_ACCESS }

        # 4.2. Si vous avez une page /register, ouvrez‐la aussi (sinon commentez)
        # - { path: ^/register,  roles: IS_AUTHENTICATED_ANONYMOUSLY }

        # 4.3. Tout ce qui commence par /trade exige ROLE_USER (donc utilisateur connecté)
        - { path: ^/trade,     roles: ROLE_USER }

        # (Si vous aviez d’autres domaines à protéger, ajoutez‐les ici, toujours APRÈS /login)

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
